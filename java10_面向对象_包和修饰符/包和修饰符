	/*
	 * 使用包组织文件，分类文件:直接的表现是在磁盘上创建目录
	 * 					  使用package关键字说明类属于那个包
	 * Java中的修饰符：访问修饰符 private
	 * 						public 
	 * 						protected
	 * 				非访问修饰符： static
	 * 							final
	 * 							abstract

 * 包的概念：包（package）是类的组织方式，是一组相关类和接口的集合
 * 		   Java提供的一种区别类的名字空间的机制
 * 			它提供了访问权限的管理机制
 * 包的应用：package 包名（要求全部小写，反域名制）
 * 				例如： 域名：news.163.com  包：com.163.news 逐级细化，逐级精细
 * 		  包的命名规范： 顶级域名，通常：com,edu,gov,mil,net,org
 * 					 com.公司名.项目名.项目分包  com.apple.quicktime.v2
 * 											com.meituan.shop.service
 * 		  注意： 一旦声明了包，则类名就是带有完整包名的类，  包名.类名
 * 			   相当于对类进行了封装： 1.要使用其他包中的类需要import
 * 								2.允许不同包存在相同的类名
 * 			  封装（复习）：1.把相关类和接口封装到一个包内
 * 						2.把属性和方法封装到一个类内
 * 						3.在一个类中隐藏内部实现细节，提供外部访问接口
 * 包的使用：import
 * 		  Alt+/ 导包提示
 * 		  Ctrl+shift+O  代替所有包
 * 		  如果需要用到某个包的多个类可以使用"*"代替所有类
 * 包的总结：1.文件组织：将功能相近的类放在同一个包中，方便开发和维护  
 * 		  2.命名机制：使用package声明的类，确定了该类属于那个包（包名.类名）,保证类的唯一性
 * 		  3.访问权限：使用其他包的类需要导入
 * 访问修饰符：private 		同一个类中
 * 			默认  		类，包
 * 			protected 类，包，子类
 * 			public   包，类，子类，不同包
 * 						简单的POJO类： 属性private
 * 			   						方法public
 
 
 * 			静态static:静态属性或方法属于类属性或类方法，即为整个类所有，不单独为某个对象所有
 * 					  静态变量单独占据一个存储空间，为所有对象共享-属于整个类
 * 
 * 				      修饰方法：非静态方法都可以访问静态方法
 * 					  		 静态方法不能直接访问属于某个对象的信息
 * 							 用法：由类直接调用，
 * 					  			  静态方法不可用this或super
 * 					  修饰属性：静态非静态都可以直接访问
 * 					  静态块： 特征：类加载后就执行，在构造方法前
 * 							     多个静态块的加载顺序依据书写顺序
 * 							 执行顺序：1.静态初始化块或静态属性（按书写顺序）
 * 									2.非静态初始化块
 * 									3.构造方法
 * 				 	  单例模式：饿汉式：立即加载的方式，无论是否会用到这个对象，都会加载
 * 								 实例：Boss
 * 							 懒汉式：延迟加载的方式，只有使用的时候才会加载
 * 								 实例：Boss2
 * 
 * 			最终final:
 * 			抽象abstract:
 
 
 