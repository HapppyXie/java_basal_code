
1.内部类是在一个类的声明里声明的类，也称嵌套类
2.内部类的使用：
		1）内部类可以作为外包类的一个成员使用，可以访问外包类的所有成员，
			   包括static静态变量和方法，以及private私有成员   Task01
			   
		JVM对内部类的实现中，在内部类对象中保存了一个对其外包类对象的引用，
	 	所以内部类可以通过该引用找到外包类的对象，进而访问外包类的成员	
			   
		2）如何标记外包类，内部类，内部类方法中的同名变量,加修饰符
			如：size   内部类方法中的，size				  Task02
					  内部类的，this.size
					  外包类的，外包类名.this.size
						  
		3）内部类可以在一个外包类的方法体语句块中定义。
			  1》该内部类只能在该语句块中创建实例对象，且内部类类名不能出现在该语句块之外；
			  2》内部类可以访问语句块中的局部变量，只限于该语句块运行期内
			  3》但final变量（常值局部变量）方法体运行结束后仍然存在，
				所以内部类对带有final的局部变量的访问不受上述限制
			  4》内部类可以访问全局变量					  Task03
			  
		4)内部类可以定义为：public protected default private.
		5)在外包类以外的其他类中访问内部类（同一个包中其他的类访问）
		   引用内部类时必须使用完整的标识：外包类名.内部类名；
		   创建内部类对象时必须与外部类的对象有关				Task04,Task04_test
		   A a = new A();
		   A.B b = a.new B();
		
		6)内部类可以是抽象类或接口。如果是接口，由其他内部类实现
			
		
		7)内部类可以被声明为static(普通类不可以)，这样内部类变成顶层类，
		  相当于把它放在外面，不再是内嵌的内部类，并且它的对象不包含指向外包类对象的指针，
		  所以不能再引用外包类对象
		  
		8)只有顶层类可以被声明为static成员。如果内部类需要定义static成员，
		  则该内部类必须声明为static，否则，一般内部类的成员不能被声明为static
		  
	 --本地类(局部类)	有类名，采用常规方法声明
内部类		  
	 --匿名类  没有类名，在一个表达式中定义，表达式的一部分  
		  
	   匿名类要继承一个父类或实现一个接口，它的定义就像调用父类或接口的构造方法，
	   但在构造方法后的代码块中包含了匿名类的定义
		  
	   匿名类定义，在一个实例对象的构造方法后加上{匿名类代码块}
	   			ClassA c = new ClassA{匿名类代码块}
		  
		  
		  
		  
		  
		  
		  
		  
		  
		  
		  
		  
		  
		  
		
					