线程(Thread)与进程(Process)在概念上是相关的。
进程是由代码，数据，内核状态和一组寄存器组成，
而线程是由表示程序运行状态的寄存器（如程序计数器，栈指针）以及堆栈组成，
线程不包括进程地址空间中的代码和数据，线程是计算过程在某一个时刻的状态.

所以，系统在产生一个线程或在各个线程之间切换时，负担要比进程小得多，因此线程也被称为轻量级进程(lightweight process)

日常编写的是单个执行流的程序。这种程序都有一个开始，一个执行顺序以及一个结束点。
程序在执行期间的任一时刻，都只有一个执行点。线程与这种单个执行流的程序相类似，但一个线程本身不是程序，
它必须运行于一个程序（进程）之中。

因此，线程可被定义为一个程序中的单个执行流。多线程指一个程序中包含多个执行流，
	多线程是实现并发的一种有效手段
	
程序，进程，线程之间的关系：
	程序是一段静态的代码，它是应用程序执行的蓝本。
	进程是程序的一次动态执行过程，它对应了从代码加载，执行到执行完毕的一个完整过程。
		这个过程也是进程本身从产生，发展到消亡的过程。进程可被加载到系统的不同内存区域执行，
		形成不同进程。
	线程是比进程更小的单位。一个进程在其执行过程中，可产生多个线程，形成多个执行流。
		每个执行流即每个线程也有它自身的产生，存在和消亡的过程，也是一个动态的概念.

多线程程序设计的含义：可以将程序任务分成几个并行的子任务。特别是在网络编程中，有很多功能可以并发执行的
--------------------------Java线程--------------------------------------
Java中的线程模型是一个虚拟的CPU,程序代码,数据的封装体
	
一个具体的线程也是:由虚拟的CPU,代码和数据组成，其中代码与数据构成了线程体，线程体决定了线程的行为.
			  虚拟的CPU由系统自动封装进Thread类的实例中，而线程体要应用程序通过一个对象传递给Thread类的构造函数
			  
Java的线程体由线程类的run()方法定义，在该方法中定义线程的具体行为。线程开始执行也是从它的run()方法开始执行，
	就像Java Application从main()方法开始，Applet()从init()开始一样
	
Thread类构造方法:一般结构 public Thread(ThreadGroup group,Runnable target,String name)
					 	group:指明该线程所属的线程组
					 	target:提供线程体的对象。Java.lang.Runnabel接口中定义了run()方法，
					 		实现该接口的类的对象可以提供线程体，线程启动时该对象的run()方法将将被调用
					 	name:线程名称
				上面每个参数都可为null,不同参数去null,就成了Thread类的各种构造方法
				
线程创建中，线程体的构造是关键。任何实现Runnable接口的对象都可以作为Thread类构造方法的target参数,
		 而Thread类本身就实现了Runnable接口.故存在两种方式提供run()方法的实现
		 
	1>实现Runnbale接口：定义一个类实现Runnable接口，即实现run()方法；把该类实例作为参数传给Thread类的构造方法
	2>继承Thread类：定义一个类继承Thread类，并重写其中的run()方法
	
	比较：1.继承Thread类方法的优点：程序代码简单，并可在run()方法中直接调用线程的其他方法
		(重写run不是强制的，但要开启线程必须重写run；如果没有重写run就相当于继承了一个类)
		2.实现Runnable接口：更符合面向对象的解耦思想;便于继承其他类


