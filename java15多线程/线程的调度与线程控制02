线程优先级与线程调度策略：
  （1）Thread类线程的优先级静态常量：MIN_PRIORITY(1),MAX_PRIORITY(10),NORM_PRIORITY(5)
  （2）新建的线程将继承创建它的父线程的优先级。父线程是指执行创建新线程的语句所在线程，可能是程序的主线程，
  		可能是另一个用户自定义的线程。一般主线程具有普通优先级（5）
  （3）获取和设定线程的优先级：
  		public final int getPriority();
  		public final void setPriority();
  		
  （4）Java的线程调度策略是一种基于优先级的抢先式调度：
			选择高优先级的线程运行，低优先级的线程被高优先级的线程抢占运行
  （5）Java运行系统中按优先级设置多个线程等待池，JVM先运行高优先级池中的线程，高优先级等待池空后，
	  才考虑低优先级。如果线程运行中有更高优先级的线程成为可运行的，则cpu将被高优先级线程抢占。
  （6）抢先式调度可能是分时的，每个同等优先级池中的线程轮流运行，也可能不是，具体由
      JVM而定，故每次同级别的线程一同被调度时，结果可能不同。
	
  
线程的基本控制：
  （1）sleep(int millsecond)把cpu让给优先级比其低的线程。不同级别退让。
  （2）yield()同级别退让给其他线程。如果没有同等优先级的线程是Runnable状态，yield()什么也不做
  （3）join() t.join()使当前线程等待直到线程t结束为止
  （4）interrupt()如果线程t在调用sleep(),join(),wait()等方法被阻塞时，则t.interrupt()将终止
  	  t的阻塞状态，并且t将接受到InterruptException异常
  （5）currentThread()返回当前线程的引用
  （6）isAlive()测试线程是否活着
  （7）stop()强行终止线程
  
  （8）susepnd()与resume() t.suspend使线程t暂停执行，t.resume()使线程t恢复执行。
  		不提倡，容易造成死锁
  		

	
