
 软件结构
  　1. C/S结构  客户端/服务器结构
  　2. B/S结构  浏览器/服务器结构
 
 
 * 网络通信协议
 * (通过计算机网络可以使多台计算机实现连接，
 * 位于同一个网络中的计算机在进行连接和通信时需要遵守一定的规则)
 * 
 * TCP/IP协议：传输控制协议/因特网互联协议(Transmission Control Protocol),
 * 			  是Internet最基本，最广泛的协议。它定义了计算机如何连入互联网，
 * 			  以及数据如何在在它们之间传输的标准，它的内部包含了一系列的用于处理数据通信的协议，
 * 			  并采用了4层分层模型，每一层呼叫它的下一层所提供的协议来完成自己的需求
 * 
 * 如：计算机-网络-属性-网络共享中心-连接-属性
 * 
 * 应用层		HTTP FTP TETP 
 * 			SMTP SNMP DNS
 * ------------------------------------------
 * 传输层　　　TCP　UDP　
 * ------------------------------------------
 * 网络层		ICMP　
 * 				IP　
 * 					ARP　RARP
 * ------------------------------------------
 * 数据链路层　		由底层网络定义的协议
 * 物理层
 * 
 * 传输层协议分类：
 * 1.UDP：用户数据协议（User　Data　Protocol　）是无连接通信协议，即在数据传输时，
 * 		　数据的发送端和接受端不建立逻辑连接
 * 
 * 		　消耗资源小，通信效率高，常用于音频，视频，和普通数据传输
 * 		　由于UDP面向无连接，不能保证数据的完整性，传输重要数据时不建议使用
 * 	　特点：数据被限制在64KB以内，超出范围不发送
 * 
 * 2.TCP：传输控制协议，面向连接的通信协议，即在数据传输之前，在发送端和接收端建立逻辑连接
 * 		　，然后再传输数据，它提供了两台计算机之间可靠无差错的数据传输
 * 
 * 	TCP连接中必须要明确客户端与服务器端，由客户端向服务器端发送连接请求，每次连接的创立都需要
 * 　经过三次握手，即客户端与服务器之间的三次交互，以保证连接的可靠
 * 		第一次握手：客户端向服务器发送连接请求，等待服务器确认
 * 		第二次握手：服务器向客户端回送一个请求，通知客户端收到了连接请求
 * 		第三次握手：客户端再次向服务器发送确认信息，再次连接。
 * 	TCP协议保证传输数据的安全，如下载文件，浏览网页等
 
 
 网络编程三要素：
 1.协议
 2.IP地址：指互联网协议地址（Internet Protocol Address）
 		  ,用来给网络中的计算机设置唯一的编号。相当于电话号码
   IP地址分类
    IPv4:32位的二进制数，通常被分为4个字节，表示成a.b.c.d的形式，例如192.168.65.100
    	 a,b,c,d都是0-255之间的10进制整数，那么最多可以表示成42亿个
    IPv6：由于互联网的蓬勃发展，网络地址资源有限，使IP地址的分配越发紧张。为扩大地址空间，
    	 拟通过IPv6重新定义地址空间，采用128位地址长度，每16个字节一组，分8组16进制数，
    	 表示成ABCD:EFO1:2345:6789:ABCD:EFO1:2345:6789,
    	 可为全世界的每一粒沙子编一个网址
 
 	查看：cmd中  1.ipconfig ip地址配置
 			   2.ping IP地址  本机地址：ping 127.0.0.1  ping localhost(本地主机)
 3.端口号：用两个字节表示的整数，取值范围为0-65535.
 		其中0-1023之间的端口号用于一些知名的网络服务和应用，
 		普通的应用程序需要使用1023以上的端口号。
 		如果端口号被另外一个服务或应用所占用，会导致程序启动失败
 		
 	IP找到唯一标识的网络设备，端口号就可以找到唯一标识设备中的进程（应用程序）了
 	
 	利用协议+IP地址+端口号 三元组合可以标识网络中的进程并交互
 
 
 域名（英语：Domain Name），又称网域，是由一串用点分隔的名字组成的Internet上某一台计算机或计算机组的名称，
 						用于在数据传输时对计算机的定位标识（有时也指地理位置）
		 由于IP地址具有不方便记忆并且不能显示地址组织的名称和性质等缺点，
		 人们设计出了域名，并通过网域名称系统（DNS，Domain Name System）
		 来将域名和IP地址相互映射，使人更方便地访问互联网，而不用去记住能够被机器直接读取的IP地址数串。
 	如：baike.baidu.com <-> Ip地址
 
 
 
 
 原理简记：客户端与服务端建立的逻辑连接包含一个IO对象，数据不仅包含字符，IO流是字节流对象
 		实际上服务器没有IO流，而是通过服务器端的一个方法，accept客户端获取请求的客户端对象
 		(Socket),使用每个客户端Socket提供的IO流对象和客户端交互
  
TCP通信程序
1.概述：TCP通信程序能实现两台计算机之间的数据交互，
	   通信的两端，要严格区分为客户端（client）与服务端（Server）
	   
  两端通信时步骤：1.服务端启动，需要事先启动，等待客户端的连接
  			  2.客户端主动连接服务端，连接成功才能通信，服务端不能主动连接客户端
 
  java提供了两个类用于实现TCP通信程序：
  	1.客户端：java.net.Socket类表示。创建Socket对象，向服务器发出请求，服务端响应请求，
  		两者建立连接开始通信
  	2.服务端：java.net.ServerSocket类表示.创建ServerSocket对象，相当于开启一个服务，
  		并等待客户端的连接
  	
          （套接字包含IP地址和端口号的网络单位）
2.Socket类:该类实现客户端套接字，套接字指得是两台设备之间的通讯端点

	构造方法：public Socket(String host,int port):创建套接字对象并
		将其连接到指定主机的指定端口号。如果指定的host是null，则相当于指定地址为回送地址
		host:服务器主机的名称/服务器的IP地址
		port：服务器端口号
		
	方法：getOutputStream​()返回此套接字的输出流。
		getInputStream​()返回此套接字的输入流。
		close​()关闭此套接字
		
	实现步骤：1.创建一个客户端对象Socket，构造方法绑定服务器的IP地址和端口好
		   2.使用Socket对象中的方法getOutStream()获取网络字节输出对象
		   3.使用网络字节流OutStream对象中的方法write(),给服务器发送数据
		   
		   4.使用Socket对象中的方法getInputStream()获取网络字节输入对象
		   5.使用网络字节流InputStream对象中的方法read(),读取服务器写回的数据
		   
		   6.释放资源close()
	注意：
		1.客户端与服务器进行交互，必须使用Socket中提供的网络流，不能使用自己创建的流对象
		2.创建客户端对象Socket时，就会去请求服务器和服务器经过三次握手建立连接铺路
			这时如果服务器没有启动，就会抛出异常
			   如果服务器启动，就可以进行交互了
			   
3.ServerSocket类：此类实现服务器套接字
	构造方法：
		public ServerSocket​(int port)
		服务器必须明确一件事情，必须知道是那个客户端请求的服务器
		使用accept方法获取到请求的客户端对象Socket
	
	成员方法：socket.accept() 侦听要连接到此套接字并接受它。 该方法将阻塞直到建立连接。
	
	实现步骤：
		1.创建ServerSocket对象和系统要指定的端口号
		2.使用ServerSocket对象中的方法accept()获取客户端Socket对象
		
		3.使用Socket对象中的getInputStream()获取网络字节输入流InputStream对象
		4.使用网络字节输入流InputStream对象中的read,读取客户端发送的数据
		
		5.使用Socket对象中网络字节流getOutputStream获取网络字节输出流OutputStream()
		6.使用网络字节输出流OutputStream对象中的write,给客户端回响数据
		   
		7.释放资源socket.close()
				server.close()
				

TCP文件上传案例：
	1.客户端使用本地字节输出流，读取要上传的文件
	2.客户端使用网络字节流，把读取的文件上传到服务器
	
	3.服务器使用网络字节输入流，读取客户端上传的文件
	4.服务器使用本地字节流，把读取的文件，保存到服务器的硬盘上
	
	5.服务器使用网络字节输出流，给客户回一个"上传成功"
	6.客户端使用网络字节输入流，读取服务器写回的数据
	
	7.释放资源
  
  明确：数据源和目的地		


		   
	
 
 
 
 
 
 
 
 
 